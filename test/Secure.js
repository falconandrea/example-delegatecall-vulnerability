const { expect } = require("chai")
const hre = require("hardhat")
const { getStorageAt } = require("@nomicfoundation/hardhat-network-helpers");

describe("Secure", function () {
  it("Should not change the helper address of the Secure Contract", async function () {
    const helperContract = await hre.ethers.deployContract("Helper", [])
    await helperContract.waitForDeployment()

    const secureContract = await hre.ethers.deployContract("Secure", [helperContract.target])
    await secureContract.waitForDeployment()

    // Get Memory Slot in position 0 and "num" value inside Secure contract before setNum call
    let numSlotBefore = await getStorageAt(secureContract.target, 0)
    numSlotBefore = hre.ethers.AbiCoder.defaultAbiCoder().decode(["uint"], numSlotBefore)[0]
    const numValueBefore = await secureContract.num()
    expect(parseInt(numValueBefore)).to.equal(0)
    expect(parseInt(numSlotBefore)).to.equal(0)

    // Get Memory Slot in position 1 and "helper" value inside Secure contract before setNum call
    let helperSlotBefore = await getStorageAt(secureContract.target, 1)
    helperSlotBefore = hre.ethers.AbiCoder.defaultAbiCoder().decode(["address"], helperSlotBefore)[0]
    const helperValueBefore = await secureContract.helper()
    expect(helperValueBefore).to.equal(helperContract.target)
    expect(helperSlotBefore).to.equal(helperContract.target)

    // Update Num with delegateCall
    await secureContract.setNum(5)

    // Get Memory Slot in position 0 and "num" value inside Secure contract before setNum call
    let numSlotAfter = await getStorageAt(secureContract.target, 0)
    numSlotAfter = hre.ethers.AbiCoder.defaultAbiCoder().decode(["uint"], numSlotAfter)[0]
    const numValueAfter = await secureContract.num()
    expect(parseInt(numValueAfter)).to.equal(5)
    expect(parseInt(numSlotAfter)).to.equal(5)

    // Get Memory Slot in position 1 and "helper" value inside Secure contract before setNum call
    helperSlotAfter = await getStorageAt(secureContract.target, 1)
    helperSlotAfter = hre.ethers.AbiCoder.defaultAbiCoder().decode(["address"], helperSlotAfter)[0]
    const helperValueAfter = await secureContract.helper()
    expect(helperValueAfter).to.equal(helperValueBefore)
    expect(helperSlotAfter).to.equal(helperSlotBefore)
  })

  it("Should block the attack", async function () {
    const helperContract = await hre.ethers.deployContract("Helper", [])
    await helperContract.waitForDeployment()

    const secureContract = await hre.ethers.deployContract("Secure", [helperContract.target])
    await secureContract.waitForDeployment()

    const attackContract = await hre.ethers.deployContract("Attack", [secureContract.target])
    await attackContract.waitForDeployment()

    await expect(attackContract.attack()).to.be.revertedWith("You are not the ower")
  })
})
